// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v7.0", FrameworkDisplayName = ".NET 7.0")]
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Dz.Client")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Dz.Client")]
[assembly: System.Reflection.AssemblyTitleAttribute("Dz.Client")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.

// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
﻿using System.Net;
using System.Net.Sockets;
using System.Text;

string serverHost = "localhost";
int port = 4812;
const int bufferSize = 1024;
IPAddress? serverAddress = Dns.GetHostEntry(serverHost)
    .AddressList.Where(address => address.AddressFamily == AddressFamily.InterNetwork)
    .FirstOrDefault();
if (serverAddress is null)
{
    Console.WriteLine("Unable to resolve the ip address");
    return;
}

IPEndPoint ep = new(serverAddress, port);
using Socket remote = new(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
remote.Connect(ep);
while (true)
{
    Console.Write("Enter a message > ");
    string? giveMessage = Console.ReadLine();
    remote.Send(Encoding.UTF8.GetBytes(giveMessage));
}
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v7.0", FrameworkDisplayName = ".NET 7.0")]
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Dz.Server")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Dz.Server")]
[assembly: System.Reflection.AssemblyTitleAttribute("Dz.Server")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.

// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
﻿using System.Net;
using System.Net.Sockets;
using System.Text;

string serverHost = "localhost";
int port = 4812;
const int bufferSize = 1024;
IPAddress? serverAddress = Dns.GetHostEntry(serverHost)
    .AddressList.Where(address => address.AddressFamily == AddressFamily.InterNetwork)
    .FirstOrDefault();
if (serverAddress is null)
{
    Console.WriteLine("Unable to resolve the ip address");
    return;
}

IPEndPoint ep = new(serverAddress, port);
using Socket listener = new(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
listener.Bind(ep);
listener.Listen();
while (true)
{
    using Socket client = listener.Accept();
    do
    {
        byte[] buffer = new byte[bufferSize];
        int numberOfChar = client.Receive(buffer);
        Console.WriteLine($"At {DateTime.Now.ToString("HH:mm")} from {serverAddress} got the message: {Encoding.UTF8.GetString(buffer, 0, numberOfChar)}");
    } while (true);
    client.Shutdown(SocketShutdown.Both);
}
listener.Shutdown(SocketShutdown.Both);
﻿using System.Net;
using System.Net.Sockets;
using System.Text;

namespace Dz.Winforms
{
    public partial class ClientForm : Form
    {
        public ClientForm()
        {
            InitializeComponent();
        }

        private Socket remote;

        private void ClientForm_Load(object sender, EventArgs e)
        {
            Thread thread = new(new ThreadStart(ConnectRemote));
            thread.Start();
        }

        private void ConnectRemote()
        {
            string serverHost = "localhost";
            int port = 4812;
            const int bufferSize = 1024;
            IPAddress? serverAddress = Dns.GetHostEntry(serverHost)
                .AddressList.Where(address => address.AddressFamily == AddressFamily.InterNetwork)
                .FirstOrDefault();
            if (serverAddress is null)
                Environment.Exit(0);

            IPEndPoint ep = new(serverAddress, port);
            remote = new(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            remote.Connect(ep);
        }

        private void button1_Click(object sender, EventArgs e)
        {
            string? giveMessage = this.textBox1.Text;
            remote.Send(Encoding.UTF8.GetBytes(giveMessage));
        }

        private void ClientForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            Environment.Exit(0);
        }
    }
}
﻿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Dz.Winforms
{
    public class MultiFormContext : ApplicationContext
    {
        private int openForms;

        public MultiFormContext(params Form[] forms)
        {
            openForms = forms.Length;
            foreach (var form in forms)
            {
                form.FormClosed += (s, args) =>
                {
                    if (Interlocked.Decrement(ref openForms) == 0)
                        ExitThread();
                };
                form.Show();
            }
        }
    }
}
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v7.0", FrameworkDisplayName = ".NET 7.0")]
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Dz.Winforms")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Dz.Winforms")]
[assembly: System.Reflection.AssemblyTitleAttribute("Dz.Winforms")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// Generated by the MSBuild WriteCodeFragment class.

// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Drawing;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
global using global::System.Windows.Forms;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Dz.Winforms.Server")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Dz.Winforms.Server")]
[assembly: System.Reflection.AssemblyTitleAttribute("Dz.Winforms.Server")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// Generated by the MSBuild WriteCodeFragment class.

// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Drawing;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
global using global::System.Windows.Forms;
using System.Net.Sockets;
using System.Net;
using System.Text;

namespace Dz.Winforms
{
    public partial class ServerForm : Form
    {
        public ServerForm()
        {
            InitializeComponent();
        }

        private Socket listener;
        private IPAddress? serverAddress;

        private void ServerForm_Load(object sender, EventArgs e)
        {
            ConfigureSocket();
            new Thread(new ThreadStart(StartReceivingDataInSocket))
                .Start();
            MessageBox.Show("Server is ready to work");
        }

        private void ConfigureSocket()
        {
            string serverHost = "localhost";
            int port = 4812;
            serverAddress = Dns.GetHostEntry(serverHost)
                .AddressList.Where(address => address.AddressFamily == AddressFamily.InterNetwork)
                .FirstOrDefault();

            if (serverAddress is null)
                Environment.Exit(0);

            IPEndPoint ep = new(serverAddress, port);
            listener = new(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            listener.Bind(ep);
            listener.Listen();
        }

        private void StartReceivingDataInSocket()
        {
            const int bufferSize = 1024;
            while (true)
            {
                using Socket client = listener.Accept();
                do
                {
                    byte[] buffer = new byte[bufferSize];
                    int numberOfChar = client.Receive(buffer);
                    Action addReceivedDataToList = new(() =>
                    {
                        this.listBox1.Items.Add($"At {DateTime.Now.ToString("HH:mm")} " +
                            $"from {serverAddress} " +
                            $"got the message: {Encoding.UTF8.GetString(buffer, 0, numberOfChar)}");
                    });
                    this.listBox1.Invoke(addReceivedDataToList);
                } while (true);
                client.Shutdown(SocketShutdown.Both);
            }
            listener.Shutdown(SocketShutdown.Both);
        }

        private void ServerForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            Environment.Exit(0);
        }
    }
}
﻿using System.Net;
using System.Net.Sockets;
using System.Text;

namespace Dz2.Winforms
{
    public partial class ClientForm : Form
    {
        public ClientForm()
        {
            InitializeComponent();
        }

        private Socket remote;

        private void ClientForm_Load(object sender, EventArgs e)
        {
            Thread thread = new(new ThreadStart(ConnectRemote));
            thread.Start();
        }

        private void ConnectRemote()
        {
            string serverHost = "localhost";
            int port = 4812;
            const int bufferSize = 1024;
            IPAddress? serverAddress = Dns.GetHostEntry(serverHost)
                .AddressList.Where(address => address.AddressFamily == AddressFamily.InterNetwork)
                .FirstOrDefault();
            if (serverAddress is null)
                Environment.Exit(0);

            IPEndPoint ep = new(serverAddress, port);
            remote = new(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            remote.Connect(ep);
        }

        private void button1_Click(object sender, EventArgs e)
        {
            string? giveMessage = this.textBox1.Text;
            remote.Send(Encoding.UTF8.GetBytes(giveMessage));
        }

        private void ClientForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            Environment.Exit(0);
        }
    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Dz.Winforms
{
    public class MultiFormContext : ApplicationContext
    {
        private int openForms;

        public MultiFormContext(params Form[] forms)
        {
            openForms = forms.Length;
            foreach (var form in forms)
            {
                form.FormClosed += (s, args) =>
                {
                    if (Interlocked.Decrement(ref openForms) == 0)
                        ExitThread();
                };
                form.Show();
            }
        }
    }
}
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v7.0", FrameworkDisplayName = ".NET 7.0")]
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Dz.Winforms")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Dz.Winforms")]
[assembly: System.Reflection.AssemblyTitleAttribute("Dz.Winforms")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// Generated by the MSBuild WriteCodeFragment class.

// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Drawing;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
global using global::System.Windows.Forms;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Dz2.Winforms")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Dz2.Winforms")]
[assembly: System.Reflection.AssemblyTitleAttribute("Dz2.Winforms")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// Generated by the MSBuild WriteCodeFragment class.

// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Drawing;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
global using global::System.Windows.Forms;
using Dz.Winforms;

namespace Dz2.Winforms
{
    internal static class Program
    {
        /// <summary>
        ///  The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            // To customize application configuration such as set high DPI settings or default font,
            // see https://aka.ms/applicationconfiguration.
            ApplicationConfiguration.Initialize();
            Application.Run(new MultiFormContext(new ServerForm(), new ClientForm()));
        }
    }
}
using System.Net.Sockets;
using System.Net;
using System.Text;

namespace Dz2.Winforms
{
    public partial class ServerForm : Form
    {
        public ServerForm()
        {
            InitializeComponent();
        }

        private Socket listener;
        private IPAddress? serverAddress;

        private void ServerForm_Load(object sender, EventArgs e)
        {
            ConfigureSocket();
            new Thread(new ThreadStart(StartReceivingDataInSocket))
                .Start();
            MessageBox.Show("Server is ready to work");
        }

        private void ConfigureSocket()
        {
            string serverHost = "localhost";
            int port = 4812;
            serverAddress = Dns.GetHostEntry(serverHost)
                .AddressList.Where(address => address.AddressFamily == AddressFamily.InterNetwork)
                .FirstOrDefault();

            if (serverAddress is null)
                Environment.Exit(0);

            IPEndPoint ep = new(serverAddress, port);
            listener = new(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            listener.Bind(ep);
            listener.Listen();
        }

        private void StartReceivingDataInSocket()
        {
            const int bufferSize = 1024;
            while (true)
            {
                using Socket client = listener.Accept();
                do
                {
                    byte[] buffer = new byte[bufferSize];
                    int numberOfChar = client.Receive(buffer);
                    string? givedString = Encoding.UTF8.GetString(buffer, 0, numberOfChar);
                    string addString;
                    if (givedString.ToUpper() == "DATE")
                        addString = DateTime.Now.ToString("dd-MM-yyyy");
                    else if (givedString.ToUpper() == "TIME")
                        addString = DateTime.Now.ToString("HH:mm");
                    else
                        addString = "Something wrong happened";
                    Action addReceivedDataToList = new(() =>
                    {
                        this.textBox1.Clear();
                        this.textBox1.Text = addString;
                    });
                    this.textBox1.Invoke(addReceivedDataToList);
                } while (true);
                client.Shutdown(SocketShutdown.Both);
            }
            listener.Shutdown(SocketShutdown.Both);
        }

        private void ServerForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            Environment.Exit(0);
        }
    }
}
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v7.0", FrameworkDisplayName = ".NET 7.0")]
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Dz2")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Dz2")]
[assembly: System.Reflection.AssemblyTitleAttribute("Dz2")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.

// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
﻿using System.Net;
using System.Net.Sockets;
using System.Text;

string serverHost = "localhost";
int port = 4812;
const int bufferSize = 1024;
IPAddress? serverAddress = Dns.GetHostEntry(serverHost)
    .AddressList.Where(address => address.AddressFamily == AddressFamily.InterNetwork)
    .FirstOrDefault();
if (serverAddress is null)
{
    Console.WriteLine("Unable to resolve the ip address");
    return;
}

IPEndPoint ep = new(serverAddress, port);
using Socket listener = new(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
listener.Bind(ep);
listener.Listen();
while (true)
{
    using Socket client = listener.Accept();
    do
    {
        byte[] buffer = new byte[bufferSize];
        int numberOfChar = client.Receive(buffer);
        string? givedString = Encoding.UTF8.GetString(buffer, 0, numberOfChar);
        if (givedString.ToUpper() == "DATE")
            Console.WriteLine(DateTime.Now.ToString("dd-MM-yyyy"));
        else if (givedString.ToUpper() == "TIME")
            Console.WriteLine(DateTime.Now.ToString("HH:mm"));
        else
            Console.WriteLine("Something wrong happened");
    } while (true);
    client.Shutdown(SocketShutdown.Both);
}
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v7.0", FrameworkDisplayName = ".NET 7.0")]
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Dz2.Client")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Dz2.Client")]
[assembly: System.Reflection.AssemblyTitleAttribute("Dz2.Client")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.

// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
﻿using System.Net;
using System.Net.Sockets;
using System.Text;

string serverHost = "localhost";
int port = 4812;
const int bufferSize = 1024;
IPAddress? serverAddress = Dns.GetHostEntry(serverHost)
    .AddressList.Where(address => address.AddressFamily == AddressFamily.InterNetwork)
    .FirstOrDefault();
if (serverAddress is null)
{
    Console.WriteLine("Unable to resolve the ip address");
    return;
}

IPEndPoint ep = new(serverAddress, port);
using Socket remote = new(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
remote.Connect(ep);
while (true)
{
    Console.Write("Enter \"DATE\" to know date \"TIME\" to know time > ");
    string? giveMessage = Console.ReadLine();
    remote.Send(Encoding.UTF8.GetBytes(giveMessage));
}
remote.Close();
